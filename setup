#!/bin/bash
#==============================================================================
#TITLE:            ThinClient for Pi
#DESCRIPTION:      This script makes it easy to setup a Pi as a RDP Thin Client
#AUTHOR:           Louis Ouellet
#DATE:             2021-02-16
#VERSION:          1.1-0

#==============================================================================
# CUSTOM SETTINGS
#==============================================================================

# Initialize Timer
SECOND=0

# Script name
scriptname=$(echo $0 | sed -e 's@.*/@@')

# Date
DATE=$(date +"%Y-%m-%d %H:%M:%S")

# dbg Switch
DEBUG=false


# Log Directory
LOGDIR=/tmp/log/${scriptname}/
if [ ! -d $LOGDIR ];then
    mkdir -p $LOGDIR
fi

# Log File
LgFile="${LOGDIR}$(date +%s%N).log"

# Script Personalisation
Title=""
help_options="
-h                     => Set Hostname
-u                     => Set Username
-p                     => Set Password
-o                     => Set openVPN
-d                     => Set Static DNS Server [ex: -d '8.8.8.8 8.8.4.4']
-v                     => Enable Verbose Mode
                          Input commands sent are stored in ${LOGDIR}
"
help_functions="
"
#==============================================================================
# BASH SETUP
#==============================================================================

# Set Bash
set -o pipefail
set -e

# SETS LOCALE
# Updated to en_US to support
export LC_ALL=en_US.UTF-8 > /dev/null 2>&1# || export LC_ALL=en_GB.UTF-8 > /dev/null 2>&1 || export LC_ALL=C.UTF-8 > /dev/null 2>&1

#==============================================================================
# FORMATTING
#==============================================================================

# COLORS
blackText=$(tput setaf 0)   # Black
redText=$(tput setaf 1)     # Red
greenText=$(tput setaf 2)   # Green
yellowText=$(tput setaf 3)  # Yellow
blueText=$(tput setaf 4)    # Blue
magentaText=$(tput setaf 5) # Magenta
cyanText=$(tput setaf 6)    # Cyan
whiteText=$(tput setaf 7)   # White
resetText=$(tput sgr0)      # Reset to default color

# STYLES
boldText=$(tput bold)
blinkingText=$(tput blink)
dimText=$(tput dim)

#==============================================================================
# Elements
#==============================================================================

# CHECK BOXES
checkBoxGood="[${greenText}✓${resetText}]"       # Good
checkBoxBad="[${redText}✗${resetText}]"          # Bad
checkBoxQuestion="[${magentaText}?${resetText}]"  # Question / ?
checkBoxInfo="[${cyanText}i${resetText}]"      # Info / i
checkBoxOutput="[${yellowText}!${resetText}]"      # Output / !

# STATUS
StatusOk="${checkBoxGood} System is healthy."
StatusUpdate="${checkBoxInfo} Updates are available."
StatusHot="${checkBoxBad} System is hot!"
StatusUnknown="${checkBoxQuestion} Status unknown!"

# Current Date & Time
PDATE(){
	printf "[$(date '+%Y-%m-%d %H:%M:%S')]"
}

# Log Types
INFO=$checkBoxInfo
OUTPUT=$checkBoxOutput
SUCCESS=$checkBoxGood
ERROR=$checkBoxBad

# Log Actions
CHECK="[CHECK]"
START="[START]"
RUN="[ RUN ]"
EMPT="[     ]"
OUT="[ OUT ]"
VAR="[ VAR ]"
#==============================================================================
# Logger
#==============================================================================

function help(){
  if [ $DEBUG = "true" ]; then
    echo "Help" | dbg i s
  fi
  echo -e "
Usage: $scriptname [options]

Options:
$help_options
"
}

function fatal(){
  printf "FATAL ERROR: $1\n"
  help
  exit 0
}

function dbg(){
  if [ "$1" != "" ] && [ "$2" != "" ]; then
    case "$1" in
      info|i)
        TYPE=$INFO
        ;;
      success|s)
        TYPE=$SUCCESS
        ;;
      error|e)
        TYPE=$ERROR
        ;;
      output|o)
        TYPE=$OUTPUT
        ;;
      question|q)
        TYPE=$checkBoxQuestion
        ;;
    esac
    case "$2" in
      check|c|test|t)
        ACTION=$CHECK
        ;;
      start|s)
        ACTION=$START
        ;;
      run|r)
        ACTION=$RUN
        ;;
      empty|e)
        ACTION=$EMPT
        ;;
      output|o)
        ACTION=$OUT
        ;;
      variable|var|v)
        ACTION=$VAR
        ;;
    esac
    while read DCMD; do
      LogFile=$LgFile
      if [ "$3" != "" ]; then
        LogFile=$3
      fi
      if [ $DEBUG = "true" ]; then
        printf "${TYPE}$(PDATE)${ACTION} ${DCMD}\n" | tee -a $LogFile
      else
        printf "${TYPE}$(PDATE)${ACTION} ${DCMD}\n"
      fi
    done
  else
    fatal "Missing Argument(s)"
  fi
}

function exec(){
  if [ "$1" != "" ]; then
    if [ $DEBUG = "true" ]; then
      echo "exec $1" | dbg i s
      if eval $1 2>&1 | dbg o o;then
        echo "$1" | dbg s r
      else
        echo "$1" | dbg e r
      fi
    else
      eval $1
    fi
  else
    fatal "Missing Argument(s)"
  fi
}

function pkg(){
  if [ "$1" != "" ]; then
    if [ $DEBUG = "true" ]; then
      echo "pkg $1" | dbg i s
    fi
    if [ $(dpkg-query -W -f='${Status}' $1 2>/dev/null | grep -c "ok installed") -eq 0 ]; then
      exec "sudo apt-get update"
      exec "sudo apt-get install $1 -y"
    fi
  else
    fatal "Missing Argument(s)"
  fi
}

function install(){
	exec "sudo apt-get remove -y realvnc-vnc-server geany geany-common thonny dillo vlc vlc-* gpicview geoclue-2.0 galculator qpdfview qpdfview-* mousepad rp-bookshelf debian-reference-en debian-reference-common"
	exec "sudo apt autoremove -y"
	exec "sudo apt-get update && sudo sudo apt-get upgrade -y && sudo apt-get dist-upgrade -y && sudo apt autoremove -y"
	echo "cd /tmp" | dbg i r
	cd /tmp
	pkg freerdp2-x11
	pkg zenity
	pkg yad
	pkg nmap
	pkg git
	pkg net-tools
	pkg ifupdown
	pkg fping
	pkg unzip
	pkg openvpn
	pkg openvpn-systemd-resolved
	pkg jq
	pkg dnsutils
	pkg ntp
	pkg ntpdate
	# Install & Configure TeamViewer
	exec "wget https://download.teamviewer.com/download/linux/teamviewer-host_armhf.deb"
	exec "sudo dpkg -i teamviewer-host_armhf.deb"
	exec "sudo apt --fix-broken install -y"
	TPASS=$(openssl rand -base64 12)
	exec "sudo rm teamviewer-host_armhf.deb"
	exec "sudo teamviewer --passwd \"${TPASS}\""
	# Download resources
	echo "cd /opt" | dbg i r
	cd /opt
	exec "sudo rm -r /opt/ThinClient-for-Pi"
	exec "sudo git clone https://github.com/LouisOuellet/ThinClient-for-Pi"
	exec "sudo rm -r /opt/bashrc"
	exec "sudo git clone https://github.com/LouisOuellet/bashrc"
	exec "sudo chmod -R 755 bashrc"
	exec "sudo rm -r /opt/rdp"
	exec "sudo git clone https://github.com/LouisOuellet/rdp"
	exec "sudo chmod -R 755 rdp"
	echo "cd /opt/rdp" | dbg i r
	cd /opt/rdp
	if [ -f "/usr/bin/rdp" ]; then
		exec "sudo ./rdp -vr"
	fi
	exec "sudo ./rdp -vi"
	# Configure System Services
	exec "sudo systemctl disable vncserver"
	exec "sudo systemctl disable openvpn"
	exec "sudo systemctl enable ssh"
	exec "sudo systemctl start ssh"
	exec "sudo systemctl enable ntp"
	exec "sudo systemctl start ntp"
	exec "sudo timedatectl set-ntp true"
	# Configure Dual G1 Monitor
	exec "sudo mkdir -p /usr/share/X11/xorg.conf.d"
	exec "sudo cp /opt/ThinClient-for-Pi/usr/share/X11/xorg.conf.d/60-dualscreen.conf /usr/share/X11/xorg.conf.d/60-dualscreen.conf"
	# Configure FAN GPIO
	# # Enable HDMI-0
	# if ! grep -q 'hdmi_force_hotplug=1' "/boot/config.txt"; then
	# 	exec "echo 'hdmi_force_hotplug=1' | sudo tee -a /boot/config.txt"
	# fi
	# if ! grep -q 'hdmi_drive=2' "/boot/config.txt"; then
	# 	exec "echo 'hdmi_drive=2' | sudo tee -a /boot/config.txt"
	# fi
	# Remove Black Borders
	# exec "sudo cat /boot/config.txt | sed -e 's/#disable_overscan=1/disable_overscan=1/g' | sudo tee /boot/config.txt"
	# Configure pi User
	echo "cd /home/pi/" | dbg i r
	cd /home/pi/
	exec "sudo rm -vr .*"
	exec "sudo rm -vr *"
	exec "sudo cp -vr /opt/ThinClient-for-Pi/pi/.config /home/pi/."
	exec "sudo cp -vr /opt/ThinClient-for-Pi/pi/.local /home/pi/."
	exec "sudo mkdir -p /home/pi/Desktop"
	exec "sudo mkdir -p /home/pi/Downloads"
	exec "sudo ln -s /opt/bashrc/.bashrc /home/pi/.bashrc"
	exec "sudo ln -s /opt/bashrc/.bash_profile /home/pi/.bash_profile"
	exec "sudo ln -s /opt/bashrc/.bash_logout /home/pi/.bash_logout"
	exec "echo 'rdp -mklng' > /home/pi/.bash_aliases"
	exec "sudo chmod 755 /home/pi/.bash_aliases"
	exec "sudo chown -R pi:pi /home/pi"
	# Setup Skel
	echo "cd /etc/skel/" | dbg i r
	cd /etc/skel
	exec "sudo rm -vr .*"
	exec "sudo rm -vr *"
	exec "sudo cp -vr /opt/ThinClient-for-Pi/skel/.config /etc/skel/."
	exec "sudo mkdir -p /etc/skel/Desktop"
	exec "sudo mkdir -p /etc/skel/Downloads"
	exec "sudo ln -s /opt/bashrc/.bashrc /etc/skel/.bashrc"
	exec "sudo ln -s /opt/bashrc/.bash_profile /etc/skel/.bash_profile"
	exec "sudo ln -s /opt/bashrc/.bash_logout /etc/skel/.bash_logout"
	exec "sudo ln -s /opt/bashrc/.bash_aliases /etc/skel/.bash_aliases"
	#configuring root bash
	echo "cd /root" | dbg i r
	cd /root
	exec "sudo rm -vr .*"
	exec "sudo rm -vr *"
	exec "sudo ln -s /opt/bashrc/.bashrc /root/.bashrc"
	exec "sudo ln -s /opt/bashrc/.bash_profile /root/.bash_profile"
	exec "sudo ln -s /opt/bashrc/.bash_logout /root/.bash_logout"
	exec "sudo ln -s /opt/bashrc/.bash_aliases /root/.bash_aliases"
	# Changing Hostname
	if [ "${HOST}" == "" ]; then
		HOST="Client-$((100000 + RANDOM % 999999))"
	fi
	exec "sudo cat /etc/hosts | sed -e 's/${HOSTNAME}/${HOST}/g' | sudo tee /etc/hosts"
	exec "sudo cat /etc/hostname | sed -e 's/${HOSTNAME}/${HOST}/g' | sudo tee /etc/hostname"
	# Securing
	if [ "${USER}" != "" ]; then
		exec "sudo adduser --disabled-password --gecos '' ${USER}"
		exec "sudo usermod -aG sudo ${USER}"
		exec "sudo usermod -aG video ${USER}"
		exec "sudo deluser pi sudo"
		exec "sudo passwd pi -d"
		exec "sudo chown ${USER}:${USER} {/home/pi/.bashrc,/home/pi/.bash_profile,/home/pi/.bash_logout,/home/pi/.bash_aliases}"
		exec "sudo rm /etc/sudoers.d/010_pi-nopasswd"
		if [ "${PASS}" == "" ]; then
			PASS=$(openssl rand -base64 12)
		fi
		exec "echo -e '${PASS}\n${PASS}' | passwd ${USER}"
	fi
	# Setup openVPN
	if [ "${OVPN}" != "" ]; then
		exec "sudo mkdir -p /etc/openvpn/client"
		exec "mv ${OVPN} /etc/openvpn/client/."
		cd /etc/openvpn/client
		if [[ ${OVPN} == *".tar.gz" ]]; then
			exec "tar -xzvf *.tar.gz"
		fi
		if [[ ${OVPN} == *".tar.bz2" ]]; then
			exec "tar -xjvf *.tar.bz2"
		fi
		if [[ ${OVPN} == *".zip" ]]; then
			exec "unzip *.zip"
		fi
		exec "sudo rm {*.zip,*.tar,*.tar.gz,*.tar.bz2}"
		exec "sudo chmod 600 /etc/openvpn/client/*"
		exec "sudo cat *.ovpn | tee /etc/openvpn/raspvpn.conf"
		# sudo nano /etc/openvpn/auth.txt
		# sudo chmod 600 /etc/openvpn/auth.txt
		exec "sudo systemctl enable openvpn@raspvpn.service"
		exec "sudo systemctl start openvpn@raspvpn.service"
		exec "sudo service networking restart"
	fi
}

#==============================================================================
# RUN OPTIONS & FUNCTIONS
#==============================================================================

if [ "$0" != "./${scriptname}" ];then
  fatal "Script must be run from source folder."
fi

while getopts ":vu:p:h:o:d:" option; do
	case "${option}"
		in
			d) exec "echo 'static domain_name_servers=${OPTARG}' | sudo tee -a /etc/dhcpcd.conf";;
			v) DEBUG=true;;
			u) USER=$OPTARG;;
			p) PASS=$OPTARG;;
			h) HOST=$OPTARG;;
			o) OVPN=$OPTARG;;
			\? )
				echo "Invalid option: $OPTARG" 1>&2
        help
        exit 0
				;;
			: )
				echo "Invalid option: $OPTARG requires an argument" 1>&2
        help
        exit 0
				;;
	esac
done
shift $((OPTIND -1))

#==============================================================================
# RUN SCRIPT
#==============================================================================

if [[ $EUID -ne 0 ]]; then
   fatal "This script must be run as root"
fi

install

echo "Hostname: ${HOST}" | dbg i v
echo "TeamViewer ID: $(sudo teamviewer --info | grep 'TeamViewer ID' | awk '{ print $5 }')" | dbg i v
echo "TeamViewer Password: ${TPASS}" | dbg i v
if [ "${USER}" != "" ]; then
	echo "Administrator: ${USER}" | dbg i v
	echo "Password: ${PASS}" | dbg i v
fi
if [ $DEBUG = "true" ]; then
	echo "Log File: ${LgFile}" | dbg i v
fi

echo "Installation completed, you can now reboot your Pi" | dbg i s

exit 0
